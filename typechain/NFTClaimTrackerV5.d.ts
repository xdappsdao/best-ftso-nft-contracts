/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NFTClaimTrackerV5Interface extends ethers.utils.Interface {
  functions: {
    "claimNFT(uint256)": FunctionFragment;
    "claimableNFTs(uint256)": FunctionFragment;
    "getBlockRequirements(uint256)": FunctionFragment;
    "getVPRequirements(uint256)": FunctionFragment;
    "getVaultWalletAddress(uint256)": FunctionFragment;
    "getVotePowerByAddressBlock(address,uint256)": FunctionFragment;
    "hasNotClaimed(address,uint256)": FunctionFragment;
    "initializeContract(address,address,address)": FunctionFragment;
    "meetsRequirements(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setNewClaimableNFT(address,address,uint256,uint256[],uint256[])": FunctionFragment;
    "tokenClaimed(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "tsoAddress()": FunctionFragment;
    "updateClaimableNFT(uint256,address,address,uint256,uint256[],uint256[])": FunctionFragment;
    "updateContractAdmin(address)": FunctionFragment;
    "updateTSOAddress(address)": FunctionFragment;
    "updateVotePowerAddress(address)": FunctionFragment;
    "userIsEligible(address,uint256)": FunctionFragment;
    "votePowerAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "claimNFT",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVPRequirements",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultWalletAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotePowerByAddressBlock",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasNotClaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeContract",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "meetsRequirements",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNewClaimableNFT",
    values: [string, string, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenClaimed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "tsoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateClaimableNFT",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateContractAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTSOAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotePowerAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userIsEligible",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "votePowerAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "claimNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVPRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotePowerByAddressBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasNotClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "meetsRequirements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewClaimableNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tsoAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateClaimableNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateContractAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTSOAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotePowerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userIsEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votePowerAddress",
    data: BytesLike
  ): Result;

  events: {
    "ClaimableNFTAdded(uint256,address,uint256,uint256[],uint256[])": EventFragment;
    "ClaimableNFTUpdated(uint256,address,uint256,uint256[],uint256[])": EventFragment;
    "NFTClaimed(uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClaimableNFTAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimableNFTUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class NFTClaimTrackerV5 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NFTClaimTrackerV5Interface;

  functions: {
    claimNFT(
      _idToClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        vaultWallet: string;
        claimableContract: string;
        tokenId: BigNumber;
      }
    >;

    getBlockRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVPRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getVaultWalletAddress(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getVotePowerByAddressBlock(
      _addressToCheck: string,
      _blockToCheck: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    hasNotClaimed(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initializeContract(
      _tsoAddress: string,
      _votePowerAddress: string,
      _contractAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    meetsRequirements(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewClaimableNFT(
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tsoAddress(overrides?: CallOverrides): Promise<[string]>;

    updateClaimableNFT(
      _idToUpdate: BigNumberish,
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateContractAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTSOAddress(
      _newTSOAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateVotePowerAddress(
      _newVPA: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userIsEligible(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    votePowerAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  claimNFT(
    _idToClaim: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableNFTs(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      vaultWallet: string;
      claimableContract: string;
      tokenId: BigNumber;
    }
  >;

  getBlockRequirements(
    _idToClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVPRequirements(
    _idToClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getVaultWalletAddress(
    _idToClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getVotePowerByAddressBlock(
    _addressToCheck: string,
    _blockToCheck: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  hasNotClaimed(
    _addressToCheck: string,
    _idToClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initializeContract(
    _tsoAddress: string,
    _votePowerAddress: string,
    _contractAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  meetsRequirements(
    _addressToCheck: string,
    _idToClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewClaimableNFT(
    _vaultWallet: string,
    _claimableContract: string,
    _tokenId: BigNumberish,
    _blockReqs: BigNumberish[],
    _vpReqs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenClaimed(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tsoAddress(overrides?: CallOverrides): Promise<string>;

  updateClaimableNFT(
    _idToUpdate: BigNumberish,
    _vaultWallet: string,
    _claimableContract: string,
    _tokenId: BigNumberish,
    _blockReqs: BigNumberish[],
    _vpReqs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateContractAdmin(
    _newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTSOAddress(
    _newTSOAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateVotePowerAddress(
    _newVPA: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userIsEligible(
    _addressToCheck: string,
    _idToClaim: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  votePowerAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    claimNFT(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        vaultWallet: string;
        claimableContract: string;
        tokenId: BigNumber;
      }
    >;

    getBlockRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVPRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getVaultWalletAddress(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getVotePowerByAddressBlock(
      _addressToCheck: string,
      _blockToCheck: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasNotClaimed(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initializeContract(
      _tsoAddress: string,
      _votePowerAddress: string,
      _contractAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    meetsRequirements(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setNewClaimableNFT(
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tsoAddress(overrides?: CallOverrides): Promise<string>;

    updateClaimableNFT(
      _idToUpdate: BigNumberish,
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateContractAdmin(
      _newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTSOAddress(
      _newTSOAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVotePowerAddress(
      _newVPA: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userIsEligible(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    votePowerAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ClaimableNFTAdded(
      itemId?: BigNumberish | null,
      claimableContract?: string | null,
      tokenId?: BigNumberish | null,
      blockReqs?: null,
      vpReqs?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber[], BigNumber[]],
      {
        itemId: BigNumber;
        claimableContract: string;
        tokenId: BigNumber;
        blockReqs: BigNumber[];
        vpReqs: BigNumber[];
      }
    >;

    ClaimableNFTUpdated(
      itemUpdated?: BigNumberish | null,
      claimableContract?: string | null,
      tokenId?: BigNumberish | null,
      blockReqs?: null,
      vpReqs?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber[], BigNumber[]],
      {
        itemUpdated: BigNumber;
        claimableContract: string;
        tokenId: BigNumber;
        blockReqs: BigNumber[];
        vpReqs: BigNumber[];
      }
    >;

    NFTClaimed(
      itemId?: BigNumberish | null,
      claimingAddress?: string | null
    ): TypedEventFilter<
      [BigNumber, string],
      { itemId: BigNumber; claimingAddress: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    claimNFT(
      _idToClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVPRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultWalletAddress(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotePowerByAddressBlock(
      _addressToCheck: string,
      _blockToCheck: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasNotClaimed(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializeContract(
      _tsoAddress: string,
      _votePowerAddress: string,
      _contractAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    meetsRequirements(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewClaimableNFT(
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tsoAddress(overrides?: CallOverrides): Promise<BigNumber>;

    updateClaimableNFT(
      _idToUpdate: BigNumberish,
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateContractAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTSOAddress(
      _newTSOAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateVotePowerAddress(
      _newVPA: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userIsEligible(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votePowerAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    claimNFT(
      _idToClaim: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVPRequirements(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultWalletAddress(
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotePowerByAddressBlock(
      _addressToCheck: string,
      _blockToCheck: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasNotClaimed(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializeContract(
      _tsoAddress: string,
      _votePowerAddress: string,
      _contractAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    meetsRequirements(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewClaimableNFT(
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenClaimed(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tsoAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateClaimableNFT(
      _idToUpdate: BigNumberish,
      _vaultWallet: string,
      _claimableContract: string,
      _tokenId: BigNumberish,
      _blockReqs: BigNumberish[],
      _vpReqs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateContractAdmin(
      _newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTSOAddress(
      _newTSOAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateVotePowerAddress(
      _newVPA: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userIsEligible(
      _addressToCheck: string,
      _idToClaim: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votePowerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
