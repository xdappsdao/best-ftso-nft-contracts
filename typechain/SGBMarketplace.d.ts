/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface SGBMarketplaceInterface extends ethers.utils.Interface {
  functions: {
    "_name()": FunctionFragment;
    "activeBidsByAddress(address,uint256)": FunctionFragment;
    "addFixedListing(address,address,uint256,uint256)": FunctionFragment;
    "bids(uint256)": FunctionFragment;
    "bidsByMarketplaceId(uint256,uint256)": FunctionFragment;
    "buyFixedItem(address,uint256,uint256)": FunctionFragment;
    "getAskingPrice(address,uint256)": FunctionFragment;
    "getMarketplaceId(address,uint256)": FunctionFragment;
    "initializer(string)": FunctionFragment;
    "isForSale(address,uint256)": FunctionFragment;
    "isForSaleSafe(address,uint256)": FunctionFragment;
    "marketplaceTokens(uint256)": FunctionFragment;
    "nativeWallet(address)": FunctionFragment;
    "removeFromSale(address,uint256)": FunctionFragment;
    "tokenMarketPlaceIds(address,uint256)": FunctionFragment;
    "tokenOwnerMatchesListingOwner(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "activeBidsByAddress",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addFixedListing",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "bidsByMarketplaceId",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFixedItem",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAskingPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketplaceId",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initializer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isForSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isForSaleSafe",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nativeWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromSale",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenMarketPlaceIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOwnerMatchesListingOwner",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "_name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "activeBidsByAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFixedListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidsByMarketplaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyFixedItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAskingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketplaceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isForSale", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isForSaleSafe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nativeWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenMarketPlaceIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOwnerMatchesListingOwner",
    data: BytesLike
  ): Result;

  events: {
    "AuctionItemAdded(uint256,uint256,address,uint256)": EventFragment;
    "AuctionItemSold(uint256,uint256,address,uint256)": EventFragment;
    "FixedItemAdded(uint256,uint256,address,uint256)": EventFragment;
    "FixedItemSold(uint256,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionItemAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedItemAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FixedItemSold"): EventFragment;
}

export class SGBMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SGBMarketplaceInterface;

  functions: {
    _name(overrides?: CallOverrides): Promise<[string]>;

    activeBidsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    addFixedListing(
      _owner: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _askingPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, BigNumber, BigNumber] & {
        active: boolean;
        bidder: string;
        amount: BigNumber;
        currency: string;
        marketplaceId: BigNumber;
        bidId: BigNumber;
      }
    >;

    bidsByMarketplaceId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, BigNumber, BigNumber] & {
        active: boolean;
        bidder: string;
        amount: BigNumber;
        currency: string;
        marketplaceId: BigNumber;
        bidId: BigNumber;
      }
    >;

    buyFixedItem(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _expectedPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAskingPrice(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarketplaceId(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initializer(
      contractName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isForSale(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isForSaleSafe(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    marketplaceTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, BigNumber, BigNumber, BigNumber] & {
        isForSale: boolean;
        isFixedPrice: boolean;
        owner: string;
        tokenAddress: string;
        tokenId: BigNumber;
        askingPrice: BigNumber;
        marketplaceId: BigNumber;
      }
    >;

    nativeWallet(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    removeFromSale(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenMarketPlaceIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenOwnerMatchesListingOwner(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  _name(overrides?: CallOverrides): Promise<string>;

  activeBidsByAddress(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  addFixedListing(
    _owner: string,
    _tokenAddress: string,
    _tokenId: BigNumberish,
    _askingPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, string, BigNumber, BigNumber] & {
      active: boolean;
      bidder: string;
      amount: BigNumber;
      currency: string;
      marketplaceId: BigNumber;
      bidId: BigNumber;
    }
  >;

  bidsByMarketplaceId(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, string, BigNumber, BigNumber] & {
      active: boolean;
      bidder: string;
      amount: BigNumber;
      currency: string;
      marketplaceId: BigNumber;
      bidId: BigNumber;
    }
  >;

  buyFixedItem(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    _expectedPrice: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAskingPrice(
    _tokenContract: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarketplaceId(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initializer(
    contractName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isForSale(
    _tokenContract: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isForSaleSafe(
    _tokenContract: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  marketplaceTokens(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, string, string, BigNumber, BigNumber, BigNumber] & {
      isForSale: boolean;
      isFixedPrice: boolean;
      owner: string;
      tokenAddress: string;
      tokenId: BigNumber;
      askingPrice: BigNumber;
      marketplaceId: BigNumber;
    }
  >;

  nativeWallet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  removeFromSale(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenMarketPlaceIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenOwnerMatchesListingOwner(
    _tokenAddress: string,
    _tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    _name(overrides?: CallOverrides): Promise<string>;

    activeBidsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addFixedListing(
      _owner: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _askingPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, BigNumber, BigNumber] & {
        active: boolean;
        bidder: string;
        amount: BigNumber;
        currency: string;
        marketplaceId: BigNumber;
        bidId: BigNumber;
      }
    >;

    bidsByMarketplaceId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, string, BigNumber, BigNumber] & {
        active: boolean;
        bidder: string;
        amount: BigNumber;
        currency: string;
        marketplaceId: BigNumber;
        bidId: BigNumber;
      }
    >;

    buyFixedItem(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _expectedPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAskingPrice(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketplaceId(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializer(contractName: string, overrides?: CallOverrides): Promise<void>;

    isForSale(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isForSaleSafe(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    marketplaceTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, string, string, BigNumber, BigNumber, BigNumber] & {
        isForSale: boolean;
        isFixedPrice: boolean;
        owner: string;
        tokenAddress: string;
        tokenId: BigNumber;
        askingPrice: BigNumber;
        marketplaceId: BigNumber;
      }
    >;

    nativeWallet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFromSale(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenMarketPlaceIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerMatchesListingOwner(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AuctionItemAdded(
      id?: null,
      tokenId?: null,
      tokenAddress?: null,
      askingPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        id: BigNumber;
        tokenId: BigNumber;
        tokenAddress: string;
        askingPrice: BigNumber;
      }
    >;

    AuctionItemSold(
      id?: null,
      tokenId?: null,
      tokenAddress?: null,
      askingPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        id: BigNumber;
        tokenId: BigNumber;
        tokenAddress: string;
        askingPrice: BigNumber;
      }
    >;

    FixedItemAdded(
      id?: null,
      tokenId?: null,
      tokenAddress?: null,
      askingPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        id: BigNumber;
        tokenId: BigNumber;
        tokenAddress: string;
        askingPrice: BigNumber;
      }
    >;

    FixedItemSold(
      id?: null,
      tokenId?: null,
      tokenAddress?: null,
      askingPrice?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, BigNumber],
      {
        id: BigNumber;
        tokenId: BigNumber;
        tokenAddress: string;
        askingPrice: BigNumber;
      }
    >;
  };

  estimateGas: {
    _name(overrides?: CallOverrides): Promise<BigNumber>;

    activeBidsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addFixedListing(
      _owner: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _askingPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bids(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    bidsByMarketplaceId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFixedItem(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _expectedPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAskingPrice(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketplaceId(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initializer(
      contractName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isForSale(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isForSaleSafe(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    marketplaceTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nativeWallet(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeFromSale(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenMarketPlaceIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenOwnerMatchesListingOwner(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    activeBidsByAddress(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addFixedListing(
      _owner: string,
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _askingPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidsByMarketplaceId(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFixedItem(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      _expectedPrice: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAskingPrice(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketplaceId(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initializer(
      contractName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isForSale(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isForSaleSafe(
      _tokenContract: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketplaceTokens(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nativeWallet(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeFromSale(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenMarketPlaceIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenOwnerMatchesListingOwner(
      _tokenAddress: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
