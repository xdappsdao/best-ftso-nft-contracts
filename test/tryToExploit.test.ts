const { inputToConfig } = require("@ethereum-waffle/compiler");
const { expect } = require("chai");
const { ethers } = require("hardhat");
require("@nomiclabs/hardhat-waffle");
const { isCallTrace } = require("hardhat/internal/hardhat-network/stack-traces/message-trace");

let NFPT;
let FTSOManager;
let Delegation;
let Attacker;
let owner; //contract owner
let delegator1; //a delegator, giving votepower
let delegator2; //a delegator, giving votepower
let delegateTo; //address to delegateTo

describe("Attempt to Mint From External Contract", function () {
  before(async function () {
    //deploy the contracts and get the addresses before tests
    [owner, delegator1, delegator2, delegateTo, attackerAddress] = await ethers.getSigners();

    const FTSOManagerFactory = await ethers.getContractFactory("FTSOManagerMock");
    FTSOManager = await FTSOManagerFactory.deploy();
    await FTSOManager.deployed();

    const DelegationFactory = await ethers.getContractFactory("DelegationMock");
    Delegation = await DelegationFactory.deploy();
    await Delegation.deployed();

    const NFPTFactory = await ethers.getContractFactory("NFPT");
    NFPT = await NFPTFactory.deploy(Delegation.address, delegateTo.address, FTSOManager.address);
    await NFPT.deployed();

    const AttackerFactory = await ethers.getContractFactory("tokenHack");
    Attacker = await AttackerFactory.connect(attackerAddress).deploy(NFPT.address);
    await Attacker.deployed();
  });

  it("Attempt to mint from external function --- this should not work", async function () {
    const expectedBalance = 0;
    const hackAmount = ethers.utils.parseEther("1500");
    expect(Attacker.connect(attackerAddress).tryToMint(attackerAddress.address, hackAmount)).to.be.reverted;
  });
});
